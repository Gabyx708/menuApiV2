// <auto-generated />
using System;
using Infraestructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(MenuAppContext))]
    [Migration("20231010181038_resto-usuarios")]
    partial class restousuarios
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.AutorizacionPedido", b =>
                {
                    b.Property<Guid>("IdPedido")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdPersonal")
                        .HasColumnType("char(36)");

                    b.HasKey("IdPedido", "IdPersonal");

                    b.HasIndex("IdPedido")
                        .IsUnique();

                    b.HasIndex("IdPersonal");

                    b.ToTable("AutorizacionPedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Descuento", b =>
                {
                    b.Property<Guid>("IdDescuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("FechaInicioVigencia")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Porcentaje")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDescuento");

                    b.ToTable("Descuento", (string)null);

                    b.HasData(
                        new
                        {
                            IdDescuento = new Guid("603c1e99-23d9-433f-a420-f22086e77dc4"),
                            FechaInicioVigencia = new DateTime(2023, 10, 10, 15, 10, 38, 675, DateTimeKind.Local).AddTicks(8045),
                            Porcentaje = 50m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("IdMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("FechaCarga")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaCierre")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaConsumo")
                        .HasColumnType("datetime(6)");

                    b.HasKey("IdMenu");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MenuPlatillo", b =>
                {
                    b.Property<Guid>("IdMenuPlatillo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdMenu")
                        .HasColumnType("char(36)");

                    b.Property<int>("IdPlatillo")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Solicitados")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdMenuPlatillo");

                    b.HasIndex("IdMenu");

                    b.HasIndex("IdPlatillo");

                    b.ToTable("MenuPlatillo", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pago", b =>
                {
                    b.Property<long>("NumeroPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAnulado")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("MontoPagado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("idPersonal")
                        .HasColumnType("char(36)");

                    b.HasKey("NumeroPago");

                    b.HasIndex("idPersonal");

                    b.ToTable("Pagos", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.Property<Guid>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("FechaDePedido")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdPersonal")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdRecibo")
                        .HasColumnType("char(36)");

                    b.HasKey("IdPedido");

                    b.HasIndex("IdPersonal");

                    b.HasIndex("IdRecibo");

                    b.ToTable("Pedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PedidoPorMenuPlatillo", b =>
                {
                    b.Property<Guid>("IdPedido")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdMenuPlatillo")
                        .HasColumnType("char(36)");

                    b.HasKey("IdPedido", "IdMenuPlatillo");

                    b.HasIndex("IdMenuPlatillo");

                    b.ToTable("PedidoPorMenuPlatillo", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Personal", b =>
                {
                    b.Property<Guid>("IdPersonal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaNac")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Privilegio")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("isAutomatico")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IdPersonal");

                    b.ToTable("Personal", (string)null);

                    b.HasData(
                        new
                        {
                            IdPersonal = new Guid("75c2993f-a877-4166-a0ac-84e15c403ef4"),
                            Apellido = "Aker",
                            Dni = "administrador",
                            FechaAlta = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaIngreso = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNac = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mail = "sistemas@tecnaingenieria.com",
                            Nombre = "Administrador",
                            Password = "99c1fcf52fc18a9417f60d0e6e7119957fc5638f4ee80ff04fe91bdd5763715d",
                            Privilegio = 1,
                            Telefono = "1234567890",
                            isAutomatico = false
                        },
                        new
                        {
                            IdPersonal = new Guid("1234744a-563d-4d1b-8843-feb9106d8817"),
                            Apellido = "BOT",
                            Dni = "NOUSAR",
                            FechaAlta = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaIngreso = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNac = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mail = "no usar usuario",
                            Nombre = "BOT",
                            Password = "bf409362e443f1a3275d1c31e9adc6b8f35821220e3e1b637cbbf2e0a7dacbeb",
                            Privilegio = 1,
                            Telefono = "00000",
                            isAutomatico = false
                        },
                        new
                        {
                            IdPersonal = new Guid("74a4eae0-b44b-412a-a490-5aedaf37e45c"),
                            Apellido = "Pérez",
                            Dni = "123456789",
                            FechaAlta = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaIngreso = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNac = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mail = "juanperez@example.com",
                            Nombre = "Juan",
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Privilegio = 2,
                            Telefono = "1234567890",
                            isAutomatico = false
                        },
                        new
                        {
                            IdPersonal = new Guid("49296257-6749-435b-b0c5-8ac9952d3cf5"),
                            Apellido = "González",
                            Dni = "987654321",
                            FechaAlta = new DateTime(2021, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaIngreso = new DateTime(2021, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNac = new DateTime(1988, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mail = "mariagonzalez@example.com",
                            Nombre = "María",
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Privilegio = 2,
                            Telefono = "0987654321",
                            isAutomatico = false
                        },
                        new
                        {
                            IdPersonal = new Guid("1a371422-8bf5-4f2d-93f1-8a67424da47e"),
                            Apellido = "López",
                            Dni = "456789123",
                            FechaAlta = new DateTime(2023, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaIngreso = new DateTime(2023, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNac = new DateTime(1995, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mail = "carloslopez@example.com",
                            Nombre = "Carlos",
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Privilegio = 2,
                            Telefono = "678912345",
                            isAutomatico = false
                        },
                        new
                        {
                            IdPersonal = new Guid("b97cf646-d8b0-47ca-ba53-c269864c1110"),
                            Apellido = "Ramírez",
                            Dni = "321654987",
                            FechaAlta = new DateTime(2020, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaIngreso = new DateTime(2020, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNac = new DateTime(1992, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mail = "anaramirez@example.com",
                            Nombre = "Ana",
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Privilegio = 2,
                            Telefono = "543216549",
                            isAutomatico = false
                        },
                        new
                        {
                            IdPersonal = new Guid("8af2a1ec-ecfe-40f1-b57d-5d2d01bf016c"),
                            Apellido = "Martínez",
                            Dni = "789456123",
                            FechaAlta = new DateTime(2021, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaIngreso = new DateTime(2021, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNac = new DateTime(1985, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mail = "pedromartinez@example.com",
                            Nombre = "Pedro",
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Privilegio = 2,
                            Telefono = "987654321",
                            isAutomatico = false
                        },
                        new
                        {
                            IdPersonal = new Guid("9e3bca69-3461-4e34-a598-d5ff30e811ea"),
                            Apellido = "Hernández",
                            Dni = "654123987",
                            FechaAlta = new DateTime(2022, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaIngreso = new DateTime(2022, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNac = new DateTime(1991, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mail = "laurahernandez@example.com",
                            Nombre = "Laura",
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Privilegio = 2,
                            Telefono = "876543219",
                            isAutomatico = false
                        },
                        new
                        {
                            IdPersonal = new Guid("82494643-e613-4332-93c7-2c916b59a7a6"),
                            Apellido = "Fernández",
                            Dni = "258963147",
                            FechaAlta = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaIngreso = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNac = new DateTime(1987, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mail = "diegofernandez@example.com",
                            Nombre = "Diego",
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Privilegio = 2,
                            Telefono = "741852963",
                            isAutomatico = false
                        },
                        new
                        {
                            IdPersonal = new Guid("98808cb4-01f0-496e-b3d2-0291cfe56990"),
                            Apellido = "López",
                            Dni = "741852963",
                            FechaAlta = new DateTime(2020, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaIngreso = new DateTime(2020, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNac = new DateTime(1993, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mail = "sofialopez@example.com",
                            Nombre = "Sofía",
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Privilegio = 2,
                            Telefono = "369258147",
                            isAutomatico = false
                        },
                        new
                        {
                            IdPersonal = new Guid("e09f70be-4c95-4bf8-840a-231871e158dd"),
                            Apellido = "Gómez",
                            Dni = "963852741",
                            FechaAlta = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaIngreso = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNac = new DateTime(1986, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mail = "javiergomez@example.com",
                            Nombre = "Javier",
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Privilegio = 2,
                            Telefono = "159357852",
                            isAutomatico = false
                        },
                        new
                        {
                            IdPersonal = new Guid("e5e6ca2b-9aa3-47ec-b957-61669f861c9e"),
                            Apellido = "Díaz",
                            Dni = "159357852",
                            FechaAlta = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaIngreso = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNac = new DateTime(1994, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mail = "isabelladiaz@example.com",
                            Nombre = "Isabella",
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Privilegio = 2,
                            Telefono = "852963741",
                            isAutomatico = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Platillo", b =>
                {
                    b.Property<int>("IdPlatillo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPlatillo");

                    b.ToTable("Platillo", (string)null);

                    b.HasData(
                        new
                        {
                            IdPlatillo = 1,
                            Activado = true,
                            Descripcion = "Ravioli de ricotta y espinacas con salsa de tomate",
                            Precio = 1000m
                        },
                        new
                        {
                            IdPlatillo = 2,
                            Activado = true,
                            Descripcion = "milanesa a la napolitana",
                            Precio = 3000m
                        },
                        new
                        {
                            IdPlatillo = 3,
                            Activado = true,
                            Descripcion = "Ceviche de camarón y pescado",
                            Precio = 2800m
                        },
                        new
                        {
                            IdPlatillo = 4,
                            Activado = true,
                            Descripcion = "Costillas de cerdo a la barbacoa con salsa ahumada",
                            Precio = 357m
                        },
                        new
                        {
                            IdPlatillo = 5,
                            Activado = true,
                            Descripcion = "Paella mixta de mariscos y pollo",
                            Precio = 1890m
                        },
                        new
                        {
                            IdPlatillo = 6,
                            Activado = true,
                            Descripcion = "Salmón con verduras salteadas y arroz jazmín",
                            Precio = 100m
                        },
                        new
                        {
                            IdPlatillo = 7,
                            Activado = true,
                            Descripcion = "Lasaña de carne y verduras con capas de pasta",
                            Precio = 1200m
                        },
                        new
                        {
                            IdPlatillo = 8,
                            Activado = true,
                            Descripcion = "Pechuga de pollo rellena de queso de cabra ",
                            Precio = 1500m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Recibo", b =>
                {
                    b.Property<Guid>("IdRecibo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdDescuento")
                        .HasColumnType("char(36)");

                    b.Property<long?>("NumeroPago")
                        .HasColumnType("bigint");

                    b.Property<decimal>("precioTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdRecibo");

                    b.HasIndex("IdDescuento");

                    b.HasIndex("NumeroPago");

                    b.ToTable("Recibo", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AutorizacionPedido", b =>
                {
                    b.HasOne("Domain.Entities.Pedido", "Pedido")
                        .WithOne("AutorizacionPedido")
                        .HasForeignKey("Domain.Entities.AutorizacionPedido", "IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Personal", "Personal")
                        .WithMany()
                        .HasForeignKey("IdPersonal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Personal");
                });

            modelBuilder.Entity("Domain.Entities.MenuPlatillo", b =>
                {
                    b.HasOne("Domain.Entities.Menu", "Menu")
                        .WithMany("MenuPlatillos")
                        .HasForeignKey("IdMenu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Platillo", "Platillo")
                        .WithMany("MenuPlatillos")
                        .HasForeignKey("IdPlatillo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Platillo");
                });

            modelBuilder.Entity("Domain.Entities.Pago", b =>
                {
                    b.HasOne("Domain.Entities.Personal", "Personal")
                        .WithMany("pagos")
                        .HasForeignKey("idPersonal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personal");
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.HasOne("Domain.Entities.Personal", "Personal")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdPersonal")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Recibo", "Recibo")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdRecibo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Personal");

                    b.Navigation("Recibo");
                });

            modelBuilder.Entity("Domain.Entities.PedidoPorMenuPlatillo", b =>
                {
                    b.HasOne("Domain.Entities.MenuPlatillo", "MenuPlatillo")
                        .WithMany("PedidosPorMenuPlatillo")
                        .HasForeignKey("IdMenuPlatillo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pedido", "Pedido")
                        .WithMany("PedidosPorMenuPlatillo")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuPlatillo");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Domain.Entities.Recibo", b =>
                {
                    b.HasOne("Domain.Entities.Descuento", "descuento")
                        .WithMany("Recibos")
                        .HasForeignKey("IdDescuento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pago", "pago")
                        .WithMany("Recibos")
                        .HasForeignKey("NumeroPago");

                    b.Navigation("descuento");

                    b.Navigation("pago");
                });

            modelBuilder.Entity("Domain.Entities.Descuento", b =>
                {
                    b.Navigation("Recibos");
                });

            modelBuilder.Entity("Domain.Entities.Menu", b =>
                {
                    b.Navigation("MenuPlatillos");
                });

            modelBuilder.Entity("Domain.Entities.MenuPlatillo", b =>
                {
                    b.Navigation("PedidosPorMenuPlatillo");
                });

            modelBuilder.Entity("Domain.Entities.Pago", b =>
                {
                    b.Navigation("Recibos");
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.Navigation("AutorizacionPedido");

                    b.Navigation("PedidosPorMenuPlatillo");
                });

            modelBuilder.Entity("Domain.Entities.Personal", b =>
                {
                    b.Navigation("Pedidos");

                    b.Navigation("pagos");
                });

            modelBuilder.Entity("Domain.Entities.Platillo", b =>
                {
                    b.Navigation("MenuPlatillos");
                });

            modelBuilder.Entity("Domain.Entities.Recibo", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
